import argparse
import numpy as np
import pandas as pd
import re
import torch

from collections import namedtuple

def getKernelNamesFromResults(filename):
    """Get list of kernel names from results.csv file generated by rocprof <>"""
    df = pd.read_csv(filename, header=0, index_col=0)
    df.drop(['gpu-id','queue-id','queue-index','tid','grd','wgr','scr','vgpr','sgpr','fbar','sig'], axis=1, inplace=True)
    
    ofile = "kernelnames-results.csv"    
    print("Saving kernel names from results.csv in: {}".format(ofile))
    df['KernelName'].to_csv(ofile, header=False, index=False)


def getKernelNamesFromHipApiTrace(filename):
    """Get list of kernel names from hip_api_trace.txt file generated by rocprof --hip-trace <>"""
    hip_api_file = open(filename, 'r', encoding='utf-8')
    
    hip_api_exp = re.compile("^(\d*):(\d*)\s+(\d*):(\d*)\s+(\w+)\((.*)\).*$")
    HIP_API_CALL = namedtuple('HIP_API_Call', 'index hipOp name pid tid hipStartTime hipEndTime')

    hip_api_calls = []
    for i, line in enumerate(hip_api_file):
        m = hip_api_exp.match(line)
        if not m:
            print("*** ERROR: didn't match regex exp at line {}: {}".format(i+1, line))
            continue

        if 'launchkernel' in m.group(5).lower():
            kernel_name_exp = re.compile("kernel\((.*)\) stream\(.*\)")
            m1 = kernel_name_exp.match(m.group(6))
            if not m1:
                print("*** ERROR: didn't match kernel name regex:{}".format(m.group(6)))
            hip_api_calls.append(HIP_API_CALL(i+1, m.group(5), m1.group(1).strip(" "), int(m.group(3)), int(m.group(4)), int(m.group(1)), int(m.group(2))))

    hip_api_calls = pd.DataFrame(hip_api_calls)
    hip_api_calls.set_index('index', inplace=True)

    ofile = "kernelnames-hip_api.csv"
    print("Saving kernel names from hip-api-trace.txt in: {}".format(ofile))
    hip_api_calls['name'].to_csv(ofile, header=False, index=False)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--results", type=str, help="filepath to results.csv")
    parser.add_argument("--hip-api", type=str, help="filepath to hip_api_trace.txt")

    args = parser.parse_args()
    if args.results:
        print("extracting kernel names from results.csv file.")
        getKernelNamesFromResults(args.results)
    
    if args.hip_api:
        print("extracting kernel names from hip_api_trace.txt file.")
        getKernelNamesFromHipApiTrace(args.hip_api)
